<Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
    <UsingTask
        TaskName="GetPackageSource"
        TaskFactory="CodeTaskFactory"
        AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.v4.0.dll" >
        <ParameterGroup>
            <SetupDrop ParameterType="System.String" Required="true" />
            <PackageSource ParameterType="Microsoft.Build.Framework.ITaskItem" Output="true" />
        </ParameterGroup>
        <Task>
            <Using Namespace="System" />
            <using Namespace="System.IO" />
            <Using Namespace="Microsoft.Build.Framework" />
            <Using Namespace="Microsoft.Build.Utilities" />
            <Code Type="Fragment" Language="cs">
                <![CDATA[
                try
                {
                    using(var file = File.OpenText(Path.Combine(SetupDrop,"DropSources.txt")))
                    {
                        var line = file.ReadLine();
                        var coherenceDrop = line.Split(':')[1].Trim();
                        PackageSource = new TaskItem(coherenceDrop);
                    }
                }
                catch(Exception ex)
                {
                    Log.LogError("Error getting Package source from SetupDrop");
                    Log.LogErrorFromException(ex);
                }
                
                return !Log.HasLoggedErrors;
                ]]>
            </Code>
        </Task>
    </UsingTask> 
    <UsingTask
        TaskName="GetDotNetPackageFolder"
        TaskFactory="CodeTaskFactory"
        AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.v4.0.dll" >
        <ParameterGroup>
            <PackageFolderPath ParameterType="Microsoft.Build.Framework.ITaskItem" Output="true" />
        </ParameterGroup>
        <Task>
            <Using Namespace="System" />
            <Using Namespace="Microsoft.Build.Framework" />
            <Using Namespace="Microsoft.Build.Utilities" />
            <Code Type="Fragment" Language="cs">
                <![CDATA[
                try
                {
                    string runtimeRoot = ".nuget";
                    string userProfile = Environment.GetFolderPath(Environment.SpecialFolder.UserProfile);
                    var packageFolder = Path.Combine(userProfile, ".nuget","packages");
                    PackageFolderPath = new TaskItem(packageFolder);
                }
                catch(Exception ex)
                {
                    Log.LogError("Error getting Package folder");
                    Log.LogErrorFromException(ex);
                }
                
                return !Log.HasLoggedErrors;
                ]]>
            </Code>
        </Task>
    </UsingTask> 
    <UsingTask
        TaskName="RegexReplace"
        TaskFactory="CodeTaskFactory"
        AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.v4.0.dll" >
        <ParameterGroup>
            <Encoding ParameterType="System.String"/>
            <Files ParameterType="Microsoft.Build.Framework.ITaskItem[]" Required="True"/>
            <Find ParameterType="System.String" Required="True" />
            <Replace ParameterType="System.String"/>
            <Options ParameterType="System.String" Required="False"/>
        </ParameterGroup>
        <Task>
            <Using Namespace="System" />
            <Using Namespace="System.IO" />
            <Using Namespace="System.Linq" />
            <Using Namespace="System.Text.RegularExpressions" />
            <Using Namespace="Microsoft.Build.Framework" />
            <Using Namespace="Microsoft.Build.Utilities" />
            <Code Type="Fragment" Language="cs">
                <![CDATA[
                try
                {
                    if (String.IsNullOrWhiteSpace(Encoding))
                    {
                        Encoding = "utf-8";
                    }
                    if (Replace == null)
                    {
                        Replace = String.Empty;
                    }
                    foreach (var fileName in Files.Select(f => f.GetMetadata("FullPath"))) 
                    {
                        FileAttributes oldAttributes = File.GetAttributes(fileName);
                        File.SetAttributes(fileName, oldAttributes & ~FileAttributes.ReadOnly);
                        string content = File.ReadAllText(fileName);
                        RegexOptions option = RegexOptions.None;
                        Enum.TryParse<RegexOptions>(Options, out option);

                        string newContent = Regex.Replace(content, Find, Replace, option);
                        File.WriteAllText(fileName, newContent, System.Text.Encoding.GetEncoding(Encoding));
                        File.SetAttributes(fileName, oldAttributes);
                    }
                }
                catch(Exception ex)
                {
                    Log.LogError("Error running RegexReplace");
                    Log.LogErrorFromException(ex);
                }
                
                return !Log.HasLoggedErrors;
                ]]>
            </Code>
        </Task>
    </UsingTask>     
    <UsingTask
        TaskName="VerifySortedDependencies"
        TaskFactory="CodeTaskFactory"
        AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.v4.0.dll" >
        <ParameterGroup>
            <FileList ParameterType="Microsoft.Build.Framework.ITaskItem[]" Required="True"/>
        </ParameterGroup>
        <Task>
            <Using Namespace="System" />
            <Using Namespace="System.Collections.Generic" />
            <Using Namespace="System.IO" />
            <Using Namespace="System.Linq" />
            <Using Namespace="Microsoft.Build.Framework" />
            <Using Namespace="Microsoft.Build.Utilities" />
            <Code Type="Fragment" Language="cs">
                <![CDATA[
                try
                {
                    foreach(var taskItem in FileList)
                    {
                        int lineNumber = 0;
                        int sectionLineNumber = 0;
                        string jsonFile = taskItem.ItemSpec;
                        using (var reader = System.IO.File.OpenText(jsonFile))
                        {
                            int depth = 0;
                            var packages = new List<string>();
                            bool processing = false;
                            while (!reader.EndOfStream )
                            {
                                lineNumber++;
                                var wholeLine = reader.ReadLine();
                                var lineParts = wholeLine.Split(':');
                                var line = lineParts[0].Trim().Replace("\"", "");

                                if (string.Equals(line, "dependencies"))
                                {
                                    depth = 1;
                                    processing = true;
                                    sectionLineNumber = lineNumber;
                                    continue;
                                }
                                else if (processing)
                                {
                                    if (line.StartsWith("}"))
                                    {
                                        depth--;

                                        if (depth == 0)
                                        {
                                            processing = false;
                                            var sortedPackages = new List<string>(packages);
                                            sortedPackages.Sort();
                                            for(int i=0; i < packages.Count; i++)
                                            {
                                                if (!string.Equals(packages[i], sortedPackages[i]))
                                                {
                                                    Log.LogError("Dependencies not sorted in dependency section starting on line {0} in {1} {2} was found, expected {3}.", sectionLineNumber, jsonFile, packages[i], sortedPackages[i]);
                                                }
                                            }
                                            packages.Clear();
                                            continue;
                                        }
                                    }
                                    // blank lines are ok here as we might be parsing $if$ $else$ in the build, but this will only happen on the CI
                                    else if (!string.IsNullOrEmpty(line))
                                    {
                                        if (depth == 1)
                                        {
                                            if (string.Equals("Microsoft.NETCore.App", line))
                                            {
                                                if (packages.Count != 0)
                                                {
                                                    Log.LogError("Microsoft.NETCore.App should be listed first in {0}.", jsonFile);
                                                }
                                            }
                                            else
                                            {
                                                packages.Add(line);
                                            }
                                        }

                                        if (lineParts.Length > 1 && string.Equals(lineParts[1].Trim(), "{"))
                                        {
                                            depth++;
                                        }
                                    }
                                }
                            }
                        }                    
                    }
                }
                catch(Exception ex)
                {
                    Log.LogError("Error Verifying Using statements");
                    Log.LogErrorFromException(ex);
                }
                return !Log.HasLoggedErrors;
                ]]>
            </Code>
        </Task>
    </UsingTask>
    <UsingTask
        TaskName="GetFileSemanticVersion"
        TaskFactory="CodeTaskFactory"
        AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.v4.0.dll" >
        <ParameterGroup>
            <Filename ParameterType="System.String" Required="true" />
            <SemanticVersion ParameterType="Microsoft.Build.Framework.ITaskItem" Output="true" />
        </ParameterGroup>
        <Task>
            <Using Namespace="System" />
            <using Namespace="System.IO" />
            <Using Namespace="Microsoft.Build.Framework" />
            <Using Namespace="Microsoft.Build.Utilities" />
            <Using Namespace="System.Text.RegularExpressions" />
            <Code Type="Fragment" Language="cs">
                <![CDATA[
                try
                {
                    string semVer = string.Empty;
                    var ex = new Regex(@".*?(?<semver>-.*)");
                    var match = ex.Match(Filename);
                    if (match.Success)
                    {
                        semVer = match.Groups["semver"].Captures[0].Value;
                    }
                    SemanticVersion = new TaskItem(semVer);
                }
                catch(Exception ex)
                {
                    Log.LogError("Error determining semantic version of " + Filename);
                    Log.LogErrorFromException(ex);
                }
                
                return !Log.HasLoggedErrors;
                ]]>
            </Code>
        </Task>
    </UsingTask> 
</Project>
